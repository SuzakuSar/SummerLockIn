{% extends 'base.html' %}

{% block title %}Game Collection - SUMMERLOCKIN{% endblock %}
{% block header %}🎮 GAME COLLECTION 🎮{% endblock %}

{% block head %}
<style>
    /* Time Predict Theme - Full screen homepage design */
    body {
        background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
        color: #00ff88;
        font-family: 'Courier New', monospace;
        min-height: 100vh;
        margin: 0;
        overflow-x: hidden;
    }

    /* Full screen container - no longer needs flex for height */
    .collection-container {
        min-height: auto; /* Remove min-height constraint */
        padding: 1rem 2rem;
        display: flex;
        flex-direction: column;
        max-width: none;
        width: calc(100vw - 4rem);
    }

    /* Search and filter section - full width */
    .search-section {
        margin-bottom: 1.5rem;
        padding: 2rem;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 10px;
        border: 2px solid #00ff88;
        width: 100%;
    }

    .search-bar {
        width: 100%;
        max-width: 900px;
        margin: 0 auto 1.5rem auto;
        position: relative;
        display: block;
    }

    .search-input {
        width: 100%;
        padding: 1.2rem 4rem 1.2rem 1.2rem;
        font-size: 1.2rem;
        background: rgba(0, 0, 0, 0.5);
        border: 2px solid #666;
        border-radius: 12px;
        color: #00ff88;
        font-family: 'Courier New', monospace;
        transition: all 0.3s ease;
    }

    .search-input:focus {
        outline: none;
        border-color: #00ff88;
        background: rgba(0, 0, 0, 0.7);
    }

    .search-input::placeholder {
        color: #666;
    }

    .search-icon {
        position: absolute;
        right: 1.2rem;
        top: 50%;
        transform: translateY(-50%);
        color: #666;
        font-size: 1.4rem;
        pointer-events: none;
    }

    /* Category filters */
    .category-filters {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
        margin-top: 1.5rem;
    }

    .category-btn {
        background: linear-gradient(45deg, #333, #666);
        color: #ffffff;
        border: 2px solid #666;
        padding: 0.8rem 1.5rem;
        font-size: 1rem;
        font-weight: bold;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-family: 'Courier New', monospace;
        min-width: 120px;
    }

    .category-btn:hover {
        border-color: #00ff88;
        transform: translateY(-1px);
    }

    .category-btn.active {
        background: linear-gradient(45deg, #00ff88, #00cc66);
        color: #000;
        border-color: #00ff88;
    }

    /* Results info */
    .results-info {
        text-align: center;
        margin: 1.5rem 0;
        color: #cccccc;
        font-size: 1.1rem;
    }

    .results-count {
        color: #00ff88;
        font-weight: bold;
    }

    /* Games grid container - full screen width */
    .games-container {
        flex: 1;
        padding: 2rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 15px;
        border: 1px solid #333;
        overflow-y: auto;
        width: 100%; /* Use full container width */
        max-width: none; /* Remove max-width restriction */
        margin: 0;
    }

    /* Enhanced scrollbar styling - more prominent */
    .games-container::-webkit-scrollbar {
        width: 14px;
    }

    .games-container::-webkit-scrollbar-track {
        background: rgba(0, 0, 0, 0.5);
        border-radius: 7px;
        margin: 10px 0;
        border: 1px solid rgba(0, 255, 136, 0.2);
    }

    .games-container::-webkit-scrollbar-thumb {
        background: linear-gradient(180deg, #00ff88, #00cc66);
        border-radius: 7px;
        border: 2px solid rgba(0, 0, 0, 0.3);
        min-height: 50px;
    }

    .games-container::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(180deg, #00cc66, #009944);
        transform: scale(1.1);
    }

    .games-container::-webkit-scrollbar-thumb:active {
        background: linear-gradient(180deg, #009944, #007733);
    }

    /* For Firefox */
    .games-container {
        scrollbar-width: auto;
        scrollbar-color: #00ff88 rgba(0, 0, 0, 0.5);
    }

    /* Games grid - maximum 5 cards per row, full width */
    .games-grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 2rem;
        padding: 0;
        width: 100%;
    }

    /* Game card styling - much bigger cards, proper text handling */
    .game-card {
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        border: 2px solid #333;
        border-radius: 15px;
        padding: 2.5rem;
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        overflow: visible; /* Changed from hidden to allow popup */
        text-decoration: none;
        color: inherit;
        display: flex;
        flex-direction: column;
        min-height: 280px;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    .game-card:hover {
        border-color: #00ff88;
        transform: translateY(-3px);
        background: linear-gradient(135deg, #1f1f3a 0%, #1b2540 100%);
    }

    .game-card:hover .game-icon {
        transform: scale(1.1);
    }

    /* Game card header - bigger and better spaced */
    .game-header {
        display: flex;
        align-items: center;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
        flex-shrink: 0;
    }

    .game-icon {
        font-size: 3rem;
        width: 70px;
        height: 70px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(0, 255, 136, 0.1);
        border-radius: 15px;
        border: 2px solid #00ff88;
        transition: all 0.3s ease;
        flex-shrink: 0;
    }

    .game-title {
        color: #00ff88;
        font-size: 1.4rem;
        font-weight: bold;
        margin: 0;
        line-height: 1.3;
        word-wrap: break-word;
        overflow-wrap: break-word;
        hyphens: auto;
    }

    /* Game description - bigger text, proper wrapping */
    .game-description {
        color: #cccccc;
        font-size: 1.1rem;
        line-height: 1.5;
        margin-bottom: 1rem;
        flex-grow: 1;
        word-wrap: break-word;
        overflow-wrap: break-word;
        hyphens: auto;
    }

    /* Category badge - bigger and better positioned */
    .game-category {
        position: absolute;
        top: 1.5rem;
        right: 1.5rem;
        background: rgba(0, 255, 136, 0.2);
        color: #00ff88;
        padding: 0.6rem 1.2rem;
        border-radius: 20px;
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border: 1px solid rgba(0, 255, 136, 0.3);
        font-weight: bold;
        white-space: nowrap;
        max-width: 120px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* No results state - bigger for larger layout */
    .no-results {
        text-align: center;
        padding: 4rem;
        color: #666;
        grid-column: 1 / -1; /* Span all columns */
    }

    .no-results-icon {
        font-size: 4rem;
        margin-bottom: 1.5rem;
    }

    .no-results h3 {
        color: #00ff88;
        margin-bottom: 1.5rem;
        font-size: 1.5rem;
    }

    .no-results p {
        color: #cccccc;
        margin-bottom: 1.5rem;
        font-size: 1.1rem;
    }

    /* Loading state - bigger for larger layout */
    .loading {
        text-align: center;
        padding: 3rem;
        color: #00ff88;
        grid-column: 1 / -1; /* Span all columns */
    }

    .loading-spinner {
        display: inline-block;
        width: 40px;
        height: 40px;
        border: 4px solid rgba(0, 255, 136, 0.3);
        border-radius: 50%;
        border-top-color: #00ff88;
        animation: spin 1s ease-in-out infinite;
        margin-bottom: 1.5rem;
    }

    .loading p {
        font-size: 1.1rem;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }

    /* Quick actions */
    .quick-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin: 1.5rem 0;
        flex-wrap: wrap;
    }

    .action-btn {
        background: linear-gradient(45deg, #00ff88, #00cc66);
        color: #000;
        border: none;
        padding: 1rem 2rem;
        font-size: 1rem;
        font-weight: bold;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 1px;
        text-decoration: none;
        display: inline-block;
        font-family: 'Courier New', monospace;
        min-width: 150px;
    }

    .action-btn:hover {
        transform: translateY(-2px);
        background: linear-gradient(45deg, #00cc66, #009944);
    }

    .action-btn.secondary {
        background: linear-gradient(45deg, #666, #888);
        color: #ffffff;
    }

    .action-btn.secondary:hover {
        background: linear-gradient(45deg, #777, #999);
    }

    /* Stats display */
    .stats-bar {
        display: flex;
        justify-content: center;
        gap: 2rem;
        margin: 1rem 0;
        padding: 1rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 8px;
        flex-wrap: wrap;
    }

    .stat-item {
        text-align: center;
    }

    .stat-value {
        font-size: 1.5rem;
        color: #00ff88;
        font-weight: bold;
        display: block;
    }

    .stat-label {
        font-size: 0.8rem;
        color: #cccccc;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Game popup styling */
    .game-popup {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
        border: 2px solid #00ff88;
        border-radius: 15px;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transform: translateY(-20px);
        transition: all 0.3s ease;
        margin-top: 1rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(10px);
    }

    .game-popup.active {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
    }

    .game-popup-content {
        max-height: 400px;
        overflow-y: auto;
        padding: 2rem;
        position: relative;
    }

    /* Custom scrollbar for popup */
    .game-popup-content::-webkit-scrollbar {
        width: 8px;
    }

    .game-popup-content::-webkit-scrollbar-track {
        background: rgba(0, 0, 0, 0.3);
        border-radius: 4px;
    }

    .game-popup-content::-webkit-scrollbar-thumb {
        background: #00ff88;
        border-radius: 4px;
    }

    .game-popup-content::-webkit-scrollbar-thumb:hover {
        background: #00cc66;
    }

    /* Popup header */
    .popup-header {
        text-align: center;
        margin-bottom: 2rem;
        border-bottom: 1px solid rgba(0, 255, 136, 0.3);
        padding-bottom: 1.5rem;
    }

    .popup-title {
        color: #00ff88;
        font-size: 1.8rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .popup-description {
        color: #cccccc;
        font-size: 1.1rem;
        line-height: 1.5;
    }

    .popup-category {
        display: inline-block;
        background: rgba(0, 255, 136, 0.2);
        color: #00ff88;
        padding: 0.5rem 1rem;
        border-radius: 15px;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border: 1px solid rgba(0, 255, 136, 0.3);
        margin-top: 1rem;
    }

    /* Big play button */
    .popup-play-button {
        display: block;
        width: 100%;
        max-width: 300px;
        margin: 0 auto 2rem auto;
        padding: 1.5rem 2rem;
        background: linear-gradient(45deg, #00ff88, #00cc66);
        color: #000;
        font-size: 1.4rem;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 1px;
        border: none;
        border-radius: 15px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        text-align: center;
        font-family: 'Courier New', monospace;
        box-shadow: 0 6px 20px rgba(0, 255, 136, 0.3);
    }

    .popup-play-button:hover {
        background: linear-gradient(45deg, #00cc66, #009944);
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0, 255, 136, 0.5);
    }

    .popup-play-button:active {
        transform: translateY(-1px);
    }

    .popup-play-icon {
        margin-right: 0.5rem;
        font-size: 1.6rem;
    }

    /* Close button */
    .popup-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        width: 40px;
        height: 40px;
        background: rgba(255, 0, 0, 0.2);
        border: 2px solid #ff6b6b;
        border-radius: 50%;
        color: #ff6b6b;
        font-size: 1.2rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .popup-close:hover {
        background: rgba(255, 0, 0, 0.3);
        transform: scale(1.1);
    }

    /* Expandable content area for future features */
    .popup-expandable {
        border-top: 1px solid rgba(0, 255, 136, 0.2);
        padding-top: 1.5rem;
        margin-top: 1.5rem;
    }

    .popup-expandable h4 {
        color: #00ff88;
        margin-bottom: 1rem;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .popup-expandable h4::before {
        content: '📝';
        font-size: 1rem;
    }

    .popup-expandable p {
        color: #cccccc;
        line-height: 1.5;
        margin-bottom: 1rem;
    }

    .popup-expandable p:last-child {
        margin-bottom: 0;
    }

    .popup-expandable strong {
        color: #00ff88;
    }

    /* Future expansion areas */
    .popup-section {
        margin: 1.5rem 0;
        padding: 1rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        border: 1px solid rgba(0, 255, 136, 0.2);
    }

    .popup-section h5 {
        color: #00ff88;
        margin-bottom: 0.5rem;
        font-size: 1rem;
    }

    /* Responsive popup */
    @media (max-width: 768px) {
        .game-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            right: auto;
            bottom: auto;
            transform: translate(-50%, -50%) translateY(-20px);
            width: 90vw;
            max-width: 500px;
            margin-top: 0;
        }

        .game-popup.active {
            transform: translate(-50%, -50%);
        }
    }

    /* Game card modifications for popup */
    .game-card {
        position: relative; /* Enable absolute positioning for popup */
    }

    .game-card.popup-open {
        z-index: 999;
        transform: translateY(-3px);
        border-color: #00ff88;
        box-shadow: 0 8px 25px rgba(0, 255, 136, 0.3);
    }

    /* Backdrop for mobile popup */
    .popup-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        z-index: 999;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
        backdrop-filter: blur(5px);
    }

    .popup-backdrop.active {
        opacity: 1;
        visibility: visible;
    }

    /* Viral Actions - styled like existing action buttons */
    .viral-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin: 1rem 0 2rem 0;
        flex-wrap: wrap;
    }

    .viral-btn {
        background: linear-gradient(45deg, #ff6b6b, #ff5252);
        position: relative;
        overflow: hidden;
    }

    .viral-btn:hover {
        background: linear-gradient(45deg, #ff5252, #f44336);
        transform: translateY(-2px);
    }

    .daily-btn {
        background: linear-gradient(45deg, #ffd700, #ffc107);
        color: #000;
        min-width: 250px;
    }

    .daily-btn:hover {
        background: linear-gradient(45deg, #ffc107, #ff9800);
    }

    .viral-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    #dailyGameName {
        font-weight: bold;
    }

    /* Responsive design - simpler height adjustments */
    @media (max-width: 1400px) {
        .games-grid {
            grid-template-columns: repeat(4, 1fr);
            gap: 1.8rem;
        }
    }

    @media (max-width: 1100px) {
        .games-grid {
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
        }
    }

    @media (max-width: 900px) {
        .collection-container {
            padding: 1rem;
            width: calc(100vw - 2rem);
        }
        
        .games-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 1.2rem;
        }
        
        .games-container {
            height: 70vh;
            min-height: 500px;
        }
        
        .game-card {
            min-height: 260px;
            padding: 2rem;
        }
        
        .game-icon {
            width: 60px;
            height: 60px;
            font-size: 2.5rem;
        }
        
        .game-title {
            font-size: 1.2rem;
        }
        
        .game-description {
            font-size: 1rem;
        }
    }

    @media (max-width: 768px) {
        .collection-container {
            padding: 0.5rem;
            width: calc(100vw - 1rem);
        }
        
        .search-section {
            padding: 1rem;
            margin-bottom: 1rem;
        }
        
        .games-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }
        
        .games-container {
            padding: 1rem;
            height: 65vh;
            min-height: 400px;
        }
        
        .game-card {
            min-height: 240px;
            padding: 1.5rem;
        }
        
        .category-filters {
            gap: 0.5rem;
        }
        
        .category-btn {
            font-size: 0.9rem;
            padding: 0.6rem 1rem;
            min-width: 100px;
        }
        
        .stats-bar {
            gap: 2rem;
            padding: 1.5rem;
        }
        
        .quick-actions {
            flex-direction: column;
            gap: 0.8rem;
        }

        /* Viral actions responsive */
        .viral-actions {
            flex-direction: column;
            gap: 0.8rem;
        }
        
        .daily-btn {
            min-width: auto;
        }
    }

    @media (max-width: 480px) {
        .search-section {
            padding: 0.8rem;
        }
        
        .games-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }
        
        .games-container {
            height: 60vh;
            min-height: 350px;
        }
        
        .game-card {
            min-height: 220px;
            padding: 1.2rem;
        }
        
        .game-header {
            flex-direction: column;
            text-align: center;
            gap: 1rem;
        }
        
        .game-icon {
            align-self: center;
            width: 50px;
            height: 50px;
            font-size: 2rem;
        }
        
        .game-title {
            font-size: 1.1rem;
        }
        
        .game-description {
            font-size: 0.95rem;
        }
        
        .game-category {
            position: static;
            display: inline-block;
            margin-top: 0.5rem;
        }
        
        .stats-bar {
            flex-direction: column;
            gap: 1rem;
        }
    }
</style>
{% endblock %}

{% block body %}
<div class="collection-container">
    <!-- Search and Filter Section -->
    <div class="search-section">
        <div class="search-bar">
            <input 
                type="text" 
                class="search-input" 
                id="searchInput"
                placeholder="🔍 Search games by name, description, or tags..."
                value="{{ search_query }}"
                autocomplete="off"
            >
            <span class="search-icon">🔍</span>
        </div>
        
        <!-- Category Filters -->
        <div class="category-filters">
            <button class="category-btn {{ 'active' if not selected_category else '' }}" 
                    onclick="filterByCategory('')">
                All Games
            </button>
            {% for category in categories %}
            <button class="category-btn {{ 'active' if selected_category == category else '' }}" 
                    onclick="filterByCategory('{{ category }}')">
                {{ category.title() }}
            </button>
            {% endfor %}
        </div>
    </div>

    <!-- Stats Bar -->
    <div class="stats-bar">
        <div class="stat-item">
            <span class="stat-value" id="showing-count">{{ games|length }}</span>
            <span class="stat-label">Showing</span>
        </div>
        <div class="stat-item">
            <span class="stat-value">{{ total_games }}</span>
            <span class="stat-label">Total Games</span>
        </div>
        <div class="stat-item">
            <span class="stat-value">{{ categories|length }}</span>
            <span class="stat-label">Categories</span>
        </div>
    </div>

    <!-- Results Info -->
    <div class="results-info" id="resultsInfo">
        {% if search_query %}
            Showing <span class="results-count">{{ games|length }}</span> results for "<strong>{{ search_query }}</strong>"
        {% elif selected_category %}
            Showing <span class="results-count">{{ games|length }}</span> {{ selected_category }} games
        {% else %}
            Showing <span class="results-count">{{ games|length }}</span> games
        {% endif %}
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
        <a href="{{ url_for('home.index') }}" class="action-btn secondary">
            🌌 Original Home
        </a>
        <a href="{{ url_for('leaderboard.index') }}" class="action-btn">
            🏆 Leaderboards
        </a>
        <button class="action-btn secondary" onclick="clearFilters()">
            🔄 Clear Filters
        </button>
    </div>

    <!-- Viral Discovery Buttons -->
    <div class="viral-actions">
        <button class="action-btn viral-btn" onclick="playRandomGame()" id="randomGameBtn">
            🎲 Random Game
        </button>
        <button class="action-btn viral-btn daily-btn" onclick="playDailyGame()" id="dailyGameBtn">
            ⭐ Game of the Day: <span id="dailyGameName">Loading...</span>
        </button>
    </div>

    <!-- Games Container -->
    <div class="games-container">
        <div class="games-grid" id="gamesGrid">
            {% if games %}
                {% for game in games %}
                <!-- FIXED: Changed from <a> to <div> with onclick handler -->
                <div class="game-card" tabindex="0" data-game-index="{{ loop.index0 }}" 
                     onclick="showGamePopup({{ loop.index0 }})" 
                     onkeypress="if(event.key==='Enter') showGamePopup({{ loop.index0 }})">
                    <div class="game-category">{{ game.category }}</div>
                    <div class="game-header">
                        <div class="game-icon">{{ game.icon }}</div>
                        <h3 class="game-title">{{ game.name }}</h3>
                    </div>
                    <p class="game-description">{{ game.description }}</p>
                    
                    <!-- Game Popup -->
                    <div class="game-popup" id="popup-{{ loop.index0 }}">
                        <div class="game-popup-content">
                            <button class="popup-close" onclick="event.stopPropagation(); closeGamePopup({{ loop.index0 }}); return false;" aria-label="Close popup">×</button>
                            
                            <div class="popup-header">
                                <h2 class="popup-title">{{ game.name }}</h2>
                                <p class="popup-description">{{ game.description }}</p>
                                <span class="popup-category">{{ game.category }}</span>
                            </div>
                            
                            <a href="{{ url_for(game.endpoint) }}" class="popup-play-button" onclick="event.stopPropagation();">
                                <span class="popup-play-icon">▶</span>
                                Play Now
                            </a>
                            
                            <!-- Expandable content area for future features -->
                            <div class="popup-expandable">
                                <h4>Game Info</h4>
                                <p>Click "Play Now" to start this game and enjoy the experience!</p>
                                <p><strong>Category:</strong> {{ game.category.title() }}</p>
                                <p><strong>Tags:</strong> {{ game.tags|join(', ') if game.tags else 'Fun, Interactive' }}</p>
                            </div>
                        </div>
                    </div>
                </div>
                {% endfor %}
            {% else %}
                <div class="no-results">
                    <div class="no-results-icon">🎮</div>
                    <h3>No Games Found</h3>
                    <p>Try adjusting your search or filter criteria.</p>
                    <button class="action-btn" onclick="clearFilters()">
                        Clear All Filters
                    </button>
                </div>
            {% endif %}
        </div>
    </div>
</div>

<script>
// ===== GAME COLLECTION JAVASCRIPT =====

let searchTimeout;
let currentCategory = '{{ selected_category }}';
let currentOpenPopup = null;

// Store initial games data from server
window.currentGames = {{ games|tojson if games else [] }};

// DOM Elements
const searchInput = document.getElementById('searchInput');
const gamesGrid = document.getElementById('gamesGrid');
const resultsInfo = document.getElementById('resultsInfo');
const showingCount = document.getElementById('showing-count');

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    // Set up search functionality
    setupSearch();
    
    // Set up keyboard navigation
    setupKeyboardNavigation();
    
    // Set up event listeners
    setupEventListeners();
    
    // Focus search on load
    searchInput.focus();
    
    console.log('Game collection initialized - Popups should work now!');
    console.log('Initial games loaded:', window.currentGames.length);
});

// Export functions for global access
window.showGamePopup = showGamePopup;
window.closeGamePopup = closeGamePopup;
window.closeAllPopups = closeAllPopups;
window.filterByCategory = filterByCategory;
window.clearFilters = clearFilters;
window.performSearch = performSearch;

// ===== SEARCH FUNCTIONALITY =====

function setupSearch() {
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            performSearch(this.value);
        }, 300); // Debounce search
    });
    
    // Search on enter key
    searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            clearTimeout(searchTimeout);
            performSearch(this.value);
        }
    });
}

async function performSearch(query) {
    try {
        // Close any open popups when searching
        closeAllPopups();
        
        showLoading();
        
        const params = new URLSearchParams({
            q: query,
            category: currentCategory
        });
        
        const response = await fetch(`/testhome/api/search?${params}`);
        const data = await response.json();
        
        if (data.success) {
            window.currentGames = data.games; // Update global games data
            displayGames(data.games);
            updateResultsInfo(data.count, query, currentCategory);
        } else {
            throw new Error('Search failed');
        }
        
    } catch (error) {
        console.error('Search error:', error);
        showError('Search failed. Please try again.');
    }
}

// ===== CATEGORY FILTERING =====

function filterByCategory(category) {
    // Close any open popups when filtering
    closeAllPopups();
    
    currentCategory = category;
    
    // Update button states
    document.querySelectorAll('.category-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    event.target.classList.add('active');
    
    // Perform search with new category
    const query = searchInput.value;
    performSearch(query);
    
    // Update URL without reload
    const url = new URL(window.location);
    if (category) {
        url.searchParams.set('category', category);
    } else {
        url.searchParams.delete('category');
    }
    if (query) {
        url.searchParams.set('search', query);
    } else {
        url.searchParams.delete('search');
    }
    window.history.pushState({}, '', url);
}

// ===== DISPLAY FUNCTIONS =====

function displayGames(games) {
    if (!games || games.length === 0) {
        showNoResults();
        return;
    }
    
    const html = games.map((game, index) => `
        <div class="game-card" tabindex="0" data-game-index="${index}" 
             onclick="showGamePopup(${index})" 
             onkeypress="if(event.key==='Enter') showGamePopup(${index})">
            <div class="game-category">${game.category}</div>
            <div class="game-header">
                <div class="game-icon">${game.icon}</div>
                <h3 class="game-title">${game.name}</h3>
            </div>
            <p class="game-description">${game.description}</p>
            
            <!-- Game Popup -->
            <div class="game-popup" id="popup-${index}">
                <div class="game-popup-content">
                    <button class="popup-close" onclick="event.stopPropagation(); closeGamePopup(${index}); return false;" aria-label="Close popup">×</button>
                    
                    <div class="popup-header">
                        <h2 class="popup-title">${game.name}</h2>
                        <p class="popup-description">${game.description}</p>
                        <span class="popup-category">${game.category}</span>
                    </div>
                    
                    <a href="/${game.endpoint.replace('.', '/')}" class="popup-play-button" onclick="event.stopPropagation();">
                        <span class="popup-play-icon">▶</span>
                        Play Now
                    </a>
                    
                    <!-- Expandable content area for future features -->
                    <div class="popup-expandable">
                        <h4>Game Info</h4>
                        <p>Click "Play Now" to start this game and enjoy the experience!</p>
                        <p><strong>Category:</strong> ${game.category.charAt(0).toUpperCase() + game.category.slice(1)}</p>
                        <p><strong>Tags:</strong> ${game.tags ? game.tags.join(', ') : 'Fun, Interactive'}</p>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
    
    gamesGrid.innerHTML = html;
    showingCount.textContent = games.length;
}

function showLoading() {
    gamesGrid.innerHTML = `
        <div class="loading">
            <div class="loading-spinner"></div>
            <p>Searching games...</p>
        </div>
    `;
}

function showNoResults() {
    closeAllPopups(); // Close any open popups
    
    gamesGrid.innerHTML = `
        <div class="no-results">
            <div class="no-results-icon">🎮</div>
            <h3>No Games Found</h3>
            <p>Try adjusting your search or filter criteria.</p>
            <button class="action-btn" onclick="clearFilters()">
                Clear All Filters
            </button>
        </div>
    `;
    showingCount.textContent = '0';
    
    // Clear games data
    window.currentGames = [];
}

function showError(message) {
    gamesGrid.innerHTML = `
        <div class="no-results">
            <div class="no-results-icon">❌</div>
            <h3>Error</h3>
            <p>${message}</p>
            <button class="action-btn" onclick="location.reload()">
                Reload Page
            </button>
        </div>
    `;
}

function updateResultsInfo(count, query, category) {
    let text = `Showing <span class="results-count">${count}</span>`;
    
    if (query && category) {
        text += ` results for "<strong>${query}</strong>" in ${category}`;
    } else if (query) {
        text += ` results for "<strong>${query}</strong>"`;
    } else if (category) {
        text += ` ${category} games`;
    } else {
        text += ` games`;
    }
    
    resultsInfo.innerHTML = text;
}

// ===== GAME POPUP FUNCTIONALITY =====

function showGamePopup(gameIndex) {
    console.log('🎮 showGamePopup called with index:', gameIndex);
    
    // Close any existing popup
    if (currentOpenPopup !== null && currentOpenPopup !== gameIndex) {
        closeAllPopups();
    }
    
    const gameCard = document.querySelector(`[data-game-index="${gameIndex}"]`);
    const popup = document.getElementById(`popup-${gameIndex}`);
    
    if (!gameCard || !popup) {
        console.error('❌ Game card or popup not found for index:', gameIndex);
        console.log('Available cards:', document.querySelectorAll('[data-game-index]').length);
        console.log('Available popups:', document.querySelectorAll('.game-popup').length);
        return;
    }
    
    console.log('✅ Found elements, showing popup...');
    
    // Add classes
    gameCard.classList.add('popup-open');
    popup.classList.add('active');
    
    // Store current open popup
    currentOpenPopup = gameIndex;
    
    console.log('🚀 Popup should now be visible');
    
    // Create backdrop for mobile
    if (window.innerWidth <= 768) {
        createPopupBackdrop();
    }
    
    // Scroll popup into view if needed
    setTimeout(() => {
        if (window.innerWidth > 768) {
            popup.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }, 100);
    
    // Track analytics
    const game = window.currentGames[gameIndex];
    if (game) {
        trackGameClick(game.name);
    }
}

function closeGamePopup(gameIndex) {
    console.log('🔄 Closing popup for index:', gameIndex);
    
    // Prevent event bubbling and default behavior
    if (event) {
        event.preventDefault();
        event.stopPropagation();
    }
    
    const gameCard = document.querySelector(`[data-game-index="${gameIndex}"]`);
    const popup = document.getElementById(`popup-${gameIndex}`);
    
    if (gameCard && popup) {
        gameCard.classList.remove('popup-open');
        popup.classList.remove('active');
        console.log('✅ Popup closed successfully');
    }
    
    // Remove backdrop
    removePopupBackdrop();
    
    // Clear current open popup
    currentOpenPopup = null;
}

function closeAllPopups() {
    console.log('🔄 Closing all popups...');
    
    // Close currently open popup if any
    if (currentOpenPopup !== null) {
        closeGamePopup(currentOpenPopup);
    }
    
    // Fallback: close all popups
    document.querySelectorAll('.game-popup.active').forEach(popup => {
        popup.classList.remove('active');
    });
    
    document.querySelectorAll('.game-card.popup-open').forEach(card => {
        card.classList.remove('popup-open');
    });
    
    removePopupBackdrop();
    currentOpenPopup = null;
}

function createPopupBackdrop() {
    // Remove existing backdrop
    removePopupBackdrop();
    
    const backdrop = document.createElement('div');
    backdrop.className = 'popup-backdrop';
    backdrop.id = 'popup-backdrop';
    backdrop.onclick = closeAllPopups;
    
    document.body.appendChild(backdrop);
    
    // Activate backdrop
    setTimeout(() => {
        backdrop.classList.add('active');
    }, 10);
}

function removePopupBackdrop() {
    const backdrop = document.getElementById('popup-backdrop');
    if (backdrop) {
        backdrop.classList.remove('active');
        setTimeout(() => {
            backdrop.remove();
        }, 300);
    }
}

// ===== EVENT LISTENERS =====

function setupEventListeners() {
    // Close popup when clicking outside
    document.addEventListener('click', function(e) {
        // Don't close if clicking inside a popup or on a game card
        if (e.target.closest('.game-popup') || e.target.closest('.game-card')) {
            return;
        }
        
        closeAllPopups();
    });
    
    // Close popup with Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeAllPopups();
        }
    });
    
    // Handle window resize
    window.addEventListener('resize', function() {
        if (currentOpenPopup !== null) {
            // Close and reopen popup to adjust positioning
            const gameIndex = currentOpenPopup;
            closeAllPopups();
            setTimeout(() => {
                showGamePopup(gameIndex);
            }, 100);
        }
    });
}

// ===== UTILITY FUNCTIONS =====

function clearFilters() {
    searchInput.value = '';
    currentCategory = '';
    
    // Reset category buttons
    document.querySelectorAll('.category-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector('.category-btn').classList.add('active'); // First button (All Games)
    
    // Close any open popups
    closeAllPopups();
    
    // Perform empty search
    performSearch('');
    
    // Update URL
    const url = new URL(window.location);
    url.searchParams.delete('search');
    url.searchParams.delete('category');
    window.history.pushState({}, '', url);
    
    searchInput.focus();
}

// ===== KEYBOARD NAVIGATION =====

function setupKeyboardNavigation() {
    document.addEventListener('keydown', function(e) {
        // Escape key clears search or closes popup
        if (e.key === 'Escape') {
            if (currentOpenPopup !== null) {
                closeAllPopups();
            } else if (searchInput.value) {
                searchInput.value = '';
                performSearch('');
            } else {
                searchInput.focus();
            }
        }
        
        // Ctrl/Cmd + K focuses search
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            closeAllPopups(); // Close any open popups
            searchInput.focus();
            searchInput.select();
        }
    });
}

// ===== ANALYTICS =====

function trackGameClick(gameName) {
    // Optional: Add analytics tracking here
    console.log(`🎯 Game popup opened: ${gameName}`);
}

function trackGamePlay(gameName) {
    // Track when user actually clicks play
    console.log(`🎮 Game played: ${gameName}`);
}

// Add click tracking
document.addEventListener('click', function(e) {
    // Track actual game plays
    if (e.target.classList.contains('popup-play-button')) {
        const gameTitle = e.target.closest('.game-card').querySelector('.game-title');
        if (gameTitle) {
            trackGamePlay(gameTitle.textContent);
        }
    }
});

console.log('🚀 Game Collection JavaScript loaded successfully!');

// ===== SIMPLIFIED VIRAL FEATURES =====

// Mock daily games rotation
const dailyGames = [
    'Cosmic Dino Runner', 'Space Invaders', 'Snake Game', 'Clicker Game', 'Hangman',
    'Space Wordle', 'Rock Paper Scissors', 'Tic Tac Toe', 'Time Predict Challenge', 
    'Block Blast', 'Bomb Defuser', 'Wire Matching', 'Shell Game', 'I Spy Game'
];

// Initialize viral features
document.addEventListener('DOMContentLoaded', function() {
    initializeViralFeatures();
});

function initializeViralFeatures() {
    console.log('🎮 Initializing simplified viral features...');
    
    // Set Game of the Day (based on current date)
    setGameOfTheDay();
}

function setGameOfTheDay() {
    // Use date as seed for consistent daily game
    const today = new Date();
    const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);
    const dailyIndex = dayOfYear % dailyGames.length;
    const dailyGame = dailyGames[dailyIndex];
    
    const element = document.getElementById('dailyGameName');
    if (element) {
        element.textContent = dailyGame;
        element.setAttribute('data-game', dailyGame);
    }
}

// ===== VIRAL FEATURE FUNCTIONS =====

function playRandomGame() {
    console.log('🎲 Playing random game...');
    
    if (!window.currentGames || window.currentGames.length === 0) {
        alert('No games loaded yet! Please wait a moment.');
        return;
    }
    
    // Add some excitement with animation
    const button = document.getElementById('randomGameBtn');
    const originalText = button.textContent;
    button.textContent = '🎲 Rolling...';
    button.disabled = true;
    
    setTimeout(() => {
        const randomIndex = Math.floor(Math.random() * window.currentGames.length);
        const randomGame = window.currentGames[randomIndex];
        
        console.log(`🎯 Random game selected: ${randomGame.name}`);
        
        // Show popup first, then navigate
        showGamePopup(randomIndex);
        
        // Track the random selection
        trackRandomGameSelection(randomGame.name);
        
        // Reset button
        button.textContent = originalText;
        button.disabled = false;
    }, 1000);
}

function playDailyGame() {
    console.log('⭐ Playing daily game...');
    const dailyGameName = document.getElementById('dailyGameName').getAttribute('data-game');
    navigateToGameByName(dailyGameName);
    trackDailyGamePlay(dailyGameName);
}

// ===== HELPER FUNCTIONS =====

function navigateToGameByName(gameName) {
    if (!window.currentGames) {
        alert('Games not loaded yet!');
        return;
    }
    
    const game = window.currentGames.find(g => g.name === gameName);
    if (game) {
        const gameIndex = window.currentGames.indexOf(game);
        showGamePopup(gameIndex);
    } else {
        alert(`Game "${gameName}" not found!`);
    }
}

// ===== ANALYTICS TRACKING =====

function trackRandomGameSelection(gameName) {
    console.log(`📊 Random game selected: ${gameName}`);
    // In production: send to analytics
}

function trackDailyGamePlay(gameName) {
    console.log(`📊 Daily game played: ${gameName}`);
    // In production: send to analytics
}

// Export functions for global access
window.playRandomGame = playRandomGame;
window.playDailyGame = playDailyGame;

console.log('🎮 Simplified viral features loaded successfully!');
</script>
{% endblock %}